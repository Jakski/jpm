#!/usr/bin/env janet

# A script to install jpm to a given tree. This script can be run during installation
# time and will try to autodetect the host platform and generate the correct config file
# for installation and then install jpm

(import ./jpm/config)
(import ./jpm/shutil)

(def hostos (os/which))
(def iswin (= :windows hostos))
(def prefix (os/getenv "JANET_PREFIX" (os/getenv "PREFIX" "/usr/local")))
(def pkglist (os/getenv "JANET_PKGLIST" "https://github.com/janet-lang/pkgs.git"))
(def manpath (os/getenv "JANET_MANPATH" (if-not iswin (string prefix "/share/man/man1"))))
(def headerpath (os/getenv "JANET_HEADERPATH" (if-not iswin (string prefix "/include/janet"))))
(def binpath (os/getenv "JANET_BINPATH" (if-not iswin (string prefix "/bin"))))
(def libpath (os/getenv "JANET_LIBPATH" (if-not iswin (string prefix "/lib"))))
(def fix-modpath (os/getenv "JANET_STRICT_MODPATH"))
(def modpath (os/getenv "JANET_MODPATH" (if (and (not iswin) fix-modpath) (string prefix "/lib/janet"))))
(def destdir (os/getenv "DESTDIR"))

(defn do-bootstrap
  [conf]
  (let [mp (or modpath (dyn :syspath))]
    (shutil/create-dirs (string (or destdir "") mp "/.manifests"))
    (when manpath (shutil/create-dirs (string (or destdir "") manpath)))
    (when binpath (shutil/create-dirs (string (or destdir "") binpath)))
    (when libpath (shutil/create-dirs (string (or destdir "") libpath)))
    (when headerpath (shutil/create-dirs (string (or destdir "") headerpath))))
  (print "Running jpm to self install...")
  (os/execute [(dyn :executable) "jpm/cli.janet" "install" ;(if destdir [(string "--dest-dir=" destdir)] [])]
              :epx
              (merge-into (os/environ)
                          {"JPM_BOOTSTRAP_CONFIG" conf
                           "JANET_JPM_CONFIG" conf})))

(when-let [override-config (get (dyn :args) 1)]
  (do-bootstrap override-config)
  (os/exit 0))

(print)
(print "destdir: " destdir)
(print "Using install prefix: " prefix)
(print "binpath: " binpath)
(print "libpath: " libpath)
(print "manpath: " manpath)
(print "headerpath: " headerpath)
(print "modpath: " (or modpath "(default to JANET_PATH at runtime)"))
(print "Setting package listing: " pkglist)
(print)

# Write the config to a temporary file if not provided
(def config
  @{:ar  (if iswin "lib.exe" "ar")
    :auto-shebang true
    :binpath binpath
    :c++ (if iswin "cl.exe" "c++")
    :c++-link (if iswin "link.exe" "c++")
    :cc (if iswin "cl.exe" "cc")
    :cc-link (if iswin "link.exe" "cc")
    :cflags (if iswin @["/nologo" "/MD"] @["-std=c99"])
    :cppflags (if iswin @["/nologo" "/MD" "/EHsc"] @["-std=c++11"])
    :cflags-verbose (if iswin @[] @["-Wall" "-Wextra"])
    :curlpath "curl"
    :dynamic-cflags (case hostos
                      :windows @["/LD"]
                      @["-fPIC"])
    :dynamic-lflags (case hostos
                      :windows @["/DLL"]
                      :macos @["-shared" "-undefined" "dynamic_lookup" "-lpthread"]
                      @["-shared" "-lpthread"])
    :gitpath "git"
    :headerpath headerpath
    :is-msvc iswin
    :janet "janet"
    :janet-cflags @[]
    :janet-lflags (case hostos
                    :linux @["-lm" "-ldl" "-lrt" "-pthread"]
                    :macos @["-lm" "-ldl" "-pthread"]
                    :windows @[]
                    @["-lm" "-pthread"])
    :ldflags @[]
    :lflags (case hostos
              :windows @["/nologo"]
              @[])
    :libpath libpath
    :manpath manpath
    :modext (if iswin ".dll" ".so")
    :modpath modpath
    :nocolor false
    :optimize 2
    :pkglist pkglist
    :silent false
    :statext (if iswin ".static.lib" ".a")
    :tarpath "tar"
    :test false
    :use-batch-shell iswin
    :verbose false})

(def temp-config-path "./temp-config.janet")

# Sanity check for recursive data
(def buf @"")
(buffer/format buf "%j" config)
(buffer/clear buf)
(def output (buffer/format buf "# Autogenerated by jpm bootstrap.janet\n(def config %.99m)" config))
(spit temp-config-path output)
(do-bootstrap temp-config-path)
(os/rm temp-config-path)
